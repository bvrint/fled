rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isTeacher() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    // Users: anyone authenticated can read/create their user doc
    match /users/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
    }

    // Sections owned by teacher (store ownerUid on section doc)
    match /sections/{sectionId} {
      allow read: if isTeacher() && resource.data.ownerUid == request.auth.uid;
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher() && resource.data.ownerUid == request.auth.uid;
    }

    // Students under a section (store sectionId and ownerUid on student docs)
    match /students/{studentId} {
      allow read: if isTeacher() && resource.data.ownerUid == request.auth.uid;
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher() && resource.data.ownerUid == request.auth.uid;
    }

    // Parents stored under parents/{normalizedId}
    // Teachers may create/update parent contact records and manage linkedStudentIds and ownerUids
    // Parents may read their own document (authenticated by email) and update limited fields
    match /parents/{parentId} {
      // Allow teachers to read any parent doc (they need to query/manage all their parents)
      allow read: if isTeacher();
      
      // Allow teachers to create/update parent docs (they manage parent contacts)
      allow create, update: if isTeacher();
      
      // Allow teachers to delete parent docs
      allow delete: if isTeacher();
      
      // Parents can read their own doc by matching email in their ID token
      allow read: if isSignedIn() && request.auth.token.email == resource.data.email;

      // Allow parent (the person) to update only specific fields
      allow update: if isSignedIn()
        && request.auth.token.email == resource.data.email
        && request.resource.data.email == resource.data.email
        && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['linkedStudentIds', 'ownerUids']);
    }

    // Attendance (store sectionId, studentId, ownerUid)
    match /attendance/{attId} {
      allow read: if isTeacher() && resource.data.ownerUid == request.auth.uid;
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher() && resource.data.ownerUid == request.auth.uid;
    }

    // Attendance Sessions (store sectionId, ownerUid, date, status)
    match /attendanceSessions/{sessionId} {
      allow read: if isTeacher() && resource.data.ownerUid == request.auth.uid;
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher() && resource.data.ownerUid == request.auth.uid;
    }

    // Tasks (store ownerUid)
    match /tasks/{taskId} {
      allow read: if isTeacher() && resource.data.ownerUid == request.auth.uid;
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher() && resource.data.ownerUid == request.auth.uid;
    }

    // Task Scores (store taskId, sectionId, studentId, ownerUid or updatedBy)
    match /taskScores/{scoreId} {
      allow read: if isTeacher() && (
        resource.data.ownerUid == request.auth.uid || 
        resource.data.updatedBy == request.auth.uid
      );
      allow create: if isTeacher() && (
        request.resource.data.ownerUid == request.auth.uid || 
        request.resource.data.updatedBy == request.auth.uid
      );
      allow update: if isTeacher() && (
        resource.data.ownerUid == request.auth.uid || 
        resource.data.updatedBy == request.auth.uid
      );
      allow delete: if isTeacher() && (
        resource.data.ownerUid == request.auth.uid || 
        resource.data.updatedBy == request.auth.uid
      );
    }

    // Messages/Announcements (store ownerUid)
    match /messages/{msgId} {
      allow read: if isTeacher() && resource.data.ownerUid == request.auth.uid;
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTeacher() && resource.data.ownerUid == request.auth.uid;
    }
  }
}
